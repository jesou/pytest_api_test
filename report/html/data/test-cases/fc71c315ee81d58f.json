{
  "uid" : "fc71c315ee81d58f",
  "name" : "货量统计_船舶港口间航行载重吨按时间统计 (曲线)（验证日返回的船舶dwt和艘次）",
  "fullName" : "testCase3#test_main",
  "historyId" : "6996b7da9aec86daa3c359645bae46a2",
  "time" : {
    "start" : 1663051528888,
    "stop" : 1663051529082,
    "duration" : 194
  },
  "description" : "\n    :param case: 测试用例\n    :param get_db: db数据\n    :return:\n    ",
  "descriptionHtml" : "<pre><code>:param case: 测试用例\n:param get_db: db数据\n:return:\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert '682936' == '283998'\n  - 283998\n  + 682936",
  "statusTrace" : "case = ['船舶分析数据接口', '货量统计_船舶港口间航行载重吨按时间统计 (曲线)（验证日返回的船舶dwt和艘次）', '验证状态码200', 'Y', 'v1/vessels/analytics/ports/sailing/time', 'post', ...]\nget_db = <utils.utilPostgresql.sqlOperation object at 0x000001E8DF56AD90>\n\n    def test_main(case, get_db):\n        \"\"\"\n        :param case: 测试用例\n        :param get_db: db数据\n        :return:\n        \"\"\"\n        api_type, title, purpose, is_skip, url, method, data_type, params, verify_content, sql, expect_value = case\n        production_url = yamlOptions('config/requestDefault.yaml').read_yaml('server')['url']['uat_url']\n        allure.dynamic.story(api_type)\n        allure.dynamic.title(title)\n        allure.dynamic.link(production_url)\n        allure.dynamic.testcase(\"http:?\")\n        response_data = httpSamplerConfig(url=production_url, path=url, params=params, method=method).httpSampler(\n            data_type)\n        print(response_data.json())\n        # 使用后置sql执行\n        data_process.sql = sql\n        data_process.handle_sql(get_db)\n        # 断言\n        actual_value, expect_v = DataProcess.assert_result(response_data.json(), expect_value)\n>       assert actual_value == expect_v\nE       AssertionError: assert '682936' == '283998'\nE         - 283998\nE         + 682936\n\ntestCase3.py:50: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "get_db",
    "time" : {
      "start" : 1663051528610,
      "stop" : 1663051528885,
      "duration" : 275
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "case",
    "time" : {
      "start" : 1663051528885,
      "stop" : 1663051528885,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n    :param case: 测试用例\n    :param get_db: db数据\n    :return:\n    ",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert '682936' == '283998'\n  - 283998\n  + 682936",
    "statusTrace" : "case = ['船舶分析数据接口', '货量统计_船舶港口间航行载重吨按时间统计 (曲线)（验证日返回的船舶dwt和艘次）', '验证状态码200', 'Y', 'v1/vessels/analytics/ports/sailing/time', 'post', ...]\nget_db = <utils.utilPostgresql.sqlOperation object at 0x000001E8DF56AD90>\n\n    def test_main(case, get_db):\n        \"\"\"\n        :param case: 测试用例\n        :param get_db: db数据\n        :return:\n        \"\"\"\n        api_type, title, purpose, is_skip, url, method, data_type, params, verify_content, sql, expect_value = case\n        production_url = yamlOptions('config/requestDefault.yaml').read_yaml('server')['url']['uat_url']\n        allure.dynamic.story(api_type)\n        allure.dynamic.title(title)\n        allure.dynamic.link(production_url)\n        allure.dynamic.testcase(\"http:?\")\n        response_data = httpSamplerConfig(url=production_url, path=url, params=params, method=method).httpSampler(\n            data_type)\n        print(response_data.json())\n        # 使用后置sql执行\n        data_process.sql = sql\n        data_process.handle_sql(get_db)\n        # 断言\n        actual_value, expect_v = DataProcess.assert_result(response_data.json(), expect_value)\n>       assert actual_value == expect_v\nE       AssertionError: assert '682936' == '283998'\nE         - 283998\nE         + 682936\n\ntestCase3.py:50: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "55b4d664b0bdc35f",
      "name" : "stdout",
      "source" : "55b4d664b0bdc35f.txt",
      "type" : "text/plain",
      "size" : 184
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "get_db::0",
    "time" : {
      "start" : 1663051529520,
      "stop" : 1663051529521,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "船舶分析数据接口"
  }, {
    "name" : "suite",
    "value" : "testCase3"
  }, {
    "name" : "host",
    "value" : "LAPTOP-DVS119VN"
  }, {
    "name" : "thread",
    "value" : "85968-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testCase3"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "['船舶分析数据接口', '货量统计_船舶港口间航行载重吨按时间统计 (曲线)（验证日返回的船舶dwt和艘次）', '验证状态码200', 'Y', 'v1/vessels/analytics/ports/sailing/time', 'post', 'data', '{\"startTime\":\"2022-09-08 00:00:00\",\"endTime\":\"2022-09-08 16:30:04\",\"cargoTypes\":[],\"cargoTypeUnknown\":false,\"isFullLoad\":\"\",\"startPortCodes\":[],\"endPortCodes\":[\"CNSHA\"],\"nextPortCodes\":[],\"endPortBerthUuids\":[],\"mmsiList\":[],\"group\":\"DAY\"}', '', \"with port_dwt as (SELECT\\nep.port_code end_port_code,\\nMAX ( ep.name_cn ) end_port_name_cn,\\nMAX ( ep.name_en ) end_port_name_en,\\nSUM ( fm_vessel.dwt ) dwt_sum,\\nCOUNT ( 1 ) sail_sum\\nFROM\\nsdc_dw.v_vessel_dynamics_berth dt_vessel_dynamics\\nINNER JOIN sdc_dw.fm_port sp ON dt_vessel_dynamics.leg_start_port_code = sp.port_code\\nAND dt_vessel_dynamics.mmsi = ANY (\\nSELECT\\nfm_vessel.mmsi\\nFROM\\nsdc_dw.fm_vessel\\nWHERE\\n1 = 1\\nAND ( retire_year_month IS NULL OR to_date( fm_vessel.retire_year_month :: VARCHAR, 'YYYYMMDD' ) > to_char(current_timestamp,'yyyy-MM-dd 00:00:00')::timestamp )\\n)\\nAND dt_vessel_dynamics.start_postime >= to_char(current_timestamp,'yyyy-MM-dd 00:00:00')::timestamp\\nAND dt_vessel_dynamics.start_postime <= to_char(current_timestamp,'yyyy-MM-dd hh24:mi:ss')::timestamp\\nAND ais_abnormal_times <= 0\\nAND leg_start_port_code <> leg_end_port_code\\nAND leg_start_port_code <> 'AAAAA'\\nAND leg_end_port_code <> 'AAAAA'\\nINNER JOIN sdc_dw.fm_port ep ON dt_vessel_dynamics.leg_end_port_code = ep.port_code\\nAND ep.port_code IN ('CNSHA')\\nINNER JOIN sdc_dw.fm_vessel ON fm_vessel.mmsi = dt_vessel_dynamics.mmsi\\nLEFT JOIN sdc_dw.fm_port_berth ON fm_port_berth.berth_uuid = dt_vessel_dynamics.leg_start_berth_uuid\\nGROUP BY\\nsp.port_code,\\nep.port_code)\\n\\nselect\\nSUM(port_dwt.dwt_sum) dwt_sum,\\nSUM(port_dwt.sail_sum) sail_sum\\nfrom port_dwt\\ngroup by end_port_code;\", '{\"$.data[0].dwtSum\":\"$dwt_sum\",\"$.data[0].sailSum\":\"$sail_sum\"}']"
  } ],
  "links" : [ {
    "name" : "http://10.18.18.112:30085/sdc/",
    "url" : "http://10.18.18.112:30085/sdc/",
    "type" : "link"
  }, {
    "name" : "http:?",
    "url" : "http:?",
    "type" : "test_case"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "fc71c315ee81d58f.json",
  "parameterValues" : [ "['船舶分析数据接口', '货量统计_船舶港口间航行载重吨按时间统计 (曲线)（验证日返回的船舶dwt和艘次）', '验证状态码200', 'Y', 'v1/vessels/analytics/ports/sailing/time', 'post', 'data', '{\"startTime\":\"2022-09-08 00:00:00\",\"endTime\":\"2022-09-08 16:30:04\",\"cargoTypes\":[],\"cargoTypeUnknown\":false,\"isFullLoad\":\"\",\"startPortCodes\":[],\"endPortCodes\":[\"CNSHA\"],\"nextPortCodes\":[],\"endPortBerthUuids\":[],\"mmsiList\":[],\"group\":\"DAY\"}', '', \"with port_dwt as (SELECT\\nep.port_code end_port_code,\\nMAX ( ep.name_cn ) end_port_name_cn,\\nMAX ( ep.name_en ) end_port_name_en,\\nSUM ( fm_vessel.dwt ) dwt_sum,\\nCOUNT ( 1 ) sail_sum\\nFROM\\nsdc_dw.v_vessel_dynamics_berth dt_vessel_dynamics\\nINNER JOIN sdc_dw.fm_port sp ON dt_vessel_dynamics.leg_start_port_code = sp.port_code\\nAND dt_vessel_dynamics.mmsi = ANY (\\nSELECT\\nfm_vessel.mmsi\\nFROM\\nsdc_dw.fm_vessel\\nWHERE\\n1 = 1\\nAND ( retire_year_month IS NULL OR to_date( fm_vessel.retire_year_month :: VARCHAR, 'YYYYMMDD' ) > to_char(current_timestamp,'yyyy-MM-dd 00:00:00')::timestamp )\\n)\\nAND dt_vessel_dynamics.start_postime >= to_char(current_timestamp,'yyyy-MM-dd 00:00:00')::timestamp\\nAND dt_vessel_dynamics.start_postime <= to_char(current_timestamp,'yyyy-MM-dd hh24:mi:ss')::timestamp\\nAND ais_abnormal_times <= 0\\nAND leg_start_port_code <> leg_end_port_code\\nAND leg_start_port_code <> 'AAAAA'\\nAND leg_end_port_code <> 'AAAAA'\\nINNER JOIN sdc_dw.fm_port ep ON dt_vessel_dynamics.leg_end_port_code = ep.port_code\\nAND ep.port_code IN ('CNSHA')\\nINNER JOIN sdc_dw.fm_vessel ON fm_vessel.mmsi = dt_vessel_dynamics.mmsi\\nLEFT JOIN sdc_dw.fm_port_berth ON fm_port_berth.berth_uuid = dt_vessel_dynamics.leg_start_berth_uuid\\nGROUP BY\\nsp.port_code,\\nep.port_code)\\n\\nselect\\nSUM(port_dwt.dwt_sum) dwt_sum,\\nSUM(port_dwt.sail_sum) sail_sum\\nfrom port_dwt\\ngroup by end_port_code;\", '{\"$.data[0].dwtSum\":\"$dwt_sum\",\"$.data[0].sailSum\":\"$sail_sum\"}']" ]
}